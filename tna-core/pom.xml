<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jazasoft</groupId>
    <artifactId>tna-core</artifactId>
    <version>2.0.0-beta.2</version>
    <packaging>war</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>11</java.version>
        <app.dir>tna</app.dir>
        <skipIT>true</skipIT>
    </properties>

    <scm>
        <connection>scm:git:https://github.com/zahidraza/tna.git</connection>
        <url>https://github.com/zahidraza/tna</url>
    </scm>

    <dependencies>
        <dependency>
            <groupId>com.jazasoft</groupId>
            <artifactId>jazasoft-mtdb</artifactId>
            <version>3.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-envers</artifactId>
        </dependency>

        <dependency>
            <groupId>org.javers</groupId>
            <artifactId>javers-core</artifactId>
            <version>5.2.5</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>


        <!-- https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.0-b170201.1204</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/javax.activation/activation -->
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.0-b170127.1453</version>
        </dependency>

        <!-- Testing Dependencies-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Mandatory dependencies for using Spock -->
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-core</artifactId>
            <version>1.3-groovy-2.5</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-spring</artifactId>
            <version>1.3-groovy-2.5</version>
        </dependency>

        <dependency> <!-- enables mocking of classes without default constructor (together with CGLIB) -->
            <groupId>org.objenesis</groupId>
            <artifactId>objenesis</artifactId>
            <version>2.5.1</version>
            <scope>test</scope>
        </dependency>
        <dependency> <!-- only required if Hamcrest matchers are used -->
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>

            <!-- For creating Build Information-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <doCheck>false</doCheck>
                    <doUpdate>true</doUpdate>
                    <!--<format>{0,number,integer}</format>-->
                    <items>
                        <item>buildNumber</item>
                    </items>
                    <timestampFormat>{0,date,dd MMM,yyyy hh:mm a z(Z)}</timestampFormat>
                    <timezone>IST</timezone>
                    <shortRevisionLength>10</shortRevisionLength>
                    <!--<buildNumberPropertiesFileLocation>${project.basedir.basedir}/../../build/buildNumber.properties</buildNumberPropertiesFileLocation>-->
                </configuration>
            </plugin>


            <!-- For compiling Groovy source code -->
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>1.7.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compileTests</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--For Running Unit Tests in Project-->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <useFile>false</useFile>
                    <includes>
                        <include>**/*USpec.java</include>
                        <include>**/*UTest.java</include>
                    </includes>
                </configuration>
            </plugin>


            <!--For building frontend SPA -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.8.0</version>

                <configuration>
                    <workingDirectory>../tna-web-app</workingDirectory>
                </configuration>

                <executions>
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <phase>prepare-package</phase>
                        <configuration>
                            <nodeVersion>v12.6.0</nodeVersion>
                            <npmVersion>6.9.0</npmVersion>
                        </configuration>
                    </execution>

                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>prepare-package</phase>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>npm run build</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>prepare-package</phase>
                        <configuration>
                            <arguments>run build</arguments>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <!--For Copying files-->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>Copy npm build output</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>

                                <delete>
                                    <fileset dir="src/main/webapp" includes="**"/>
                                </delete>

                                <!--Copy config files-->
                                <copy overwrite="true" todir="src/main/webapp/static">
                                    <fileset dir="${project.basedir}/../tna-web-app/build">
                                        <include name="*"/>
                                        <exclude name="index.html"/>
                                        <exclude name="service-worker.js"/>
                                        <!--<exclude name="sitemap.xml"/>-->
                                        <!--<exclude name="robots.txt" />-->
                                        <type type="file"/>
                                    </fileset>
                                </copy>

                                <copy overwrite="true" todir="src/main/webapp/static/js/">
                                    <fileset dir="${project.basedir}/../tna-web-app/build/static/js"/>
                                </copy>

                                <copy overwrite="true" todir="src/main/webapp/static/css/">
                                    <fileset dir="${project.basedir}/../tna-web-app/build/static/css"/>
                                </copy>

                                <copy overwrite="true" todir="src/main/webapp/static/media/">
                                    <fileset dir="${project.basedir}/../tna-web-app/build/static/media"/>
                                </copy>

                                <copy overwrite="true" file="${project.basedir}/../tna-web-app/build/index.html"
                                      todir="src/main/webapp/WEB-INF/"/>
                                <copy overwrite="true" file="${project.basedir}/../tna-web-app/build/service-worker.js"
                                      todir="src/main/webapp/WEB-INF/"/>

                                <replace file="src/main/webapp/WEB-INF/service-worker.js" token="precache-manifest"
                                         value="static/precache-manifest"/>

                                <delete>
                                    <fileset dir="${project.basedir}/../src/main/webapp" includes="**"/>
                                </delete>

                                <copy overwrite="true" todir="${project.basedir}/../src/main/webapp">
                                    <fileset dir="${project.basedir}/src/main/webapp"/>
                                </copy>

                            </target>
                        </configuration>
                    </execution>

                    <execution>
                        <id>Prepare Container content</id>
                        <phase>install</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!--Create directory structure-->
                                <mkdir dir="${project.build.directory}/${app.dir}/bin"/>
                                <mkdir dir="${project.build.directory}/${app.dir}/conf"/>
                                <mkdir dir="${project.build.directory}/${app.dir}/conf-default"/>
                                <mkdir dir="${project.build.directory}/${app.dir}/log"/>
                                <mkdir dir="${project.build.directory}/${app.dir}/data"/>

                                <!--Copy config files-->
                                <copy todir="${project.build.directory}/${app.dir}/conf-default">
                                    <fileset dir="${project.basedir}/../container/conf">
                                        <exclude name="**/*test*.*"/>
                                    </fileset>
                                </copy>

                                <copy todir="${project.build.directory}/${app.dir}/bin">
                                    <fileset dir="${project.basedir}/../container/bin"/>
                                </copy>
                                <copy file="${project.build.directory}/classes/run.sh"
                                      todir="${project.build.directory}/${app.dir}/bin"/>

                                <copy todir="${project.build.directory}/${app.dir}">
                                    <fileset dir="${project.basedir}/../container">
                                        <include name="*"/>
                                        <type type="file"/>
                                    </fileset>
                                </copy>

                                <copy file="${project.build.directory}/${project.build.finalName}.war"
                                      todir="${project.build.directory}/${app.dir}"/>

                                <zip basedir="${project.build.directory}"
                                     destfile="${project.build.directory}/${app.dir}.zip"
                                     includes="${app.dir}/**/*"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!--For Running Integration Tests in Project-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipITs>${skipIT}</skipITs>
                    <includes>
                        <!--<include>**/*ITest.java</include>-->
                        <include>**/*ISpec.java</include>
                    </includes>
                </configuration>
            </plugin>

            <!--Spring boot plugin to create packaged application-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--For genarating Liquibase Change logs-->
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>3.4.1</version>
                <configuration>
                    <propertyFile>src/main/resources/liquibase.properties</propertyFile>
                    <!--<diffTypes>tables,views,columns,indexes,foreignkeys,primarykeys,uniqueconstraints,data</diffTypes>-->
                    <!--<diffTypes>data</diffTypes>-->
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.liquibase.ext</groupId>
                        <artifactId>liquibase-hibernate4</artifactId>
                        <version>3.5</version>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-beans</artifactId>
                        <version>4.1.7.RELEASE</version>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.data</groupId>
                        <artifactId>spring-data-jpa</artifactId>
                        <version>1.7.3.RELEASE</version>
                    </dependency>
                </dependencies>
            </plugin>

        </plugins>
    </build>


</project>